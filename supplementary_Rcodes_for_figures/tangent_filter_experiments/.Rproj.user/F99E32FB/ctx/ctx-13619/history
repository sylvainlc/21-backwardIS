library(GrandParisPackage)
rm(list = ls())
library(GrandParisPackage)
library(parallel)
source("simulationParameters.R")
seed <- 122
set.seed(seed)
simulated_POD <- read.table(paste0("simulated_data/simul_data_seed", seed, ".txt"),
sep = ";", header = T)
observations <- simulated_POD[, "observations"]
rm(list = ls())
library(GrandParisPackage)
library(parallel)
source("simulationParameters.R")
n_traj <- 500
mclapply(1:n_traj,
function(i){
seed <- 100 + i
set.seed(seed)
simulated_POD <- SINE_simulate(theta = trueTheta, sigma = trueSigma2, x0 = 0,
times = times)
write.table(simulated_POD, paste0("simulated_data/simul_data_seed", seed, ".txt"),
col.names = T, row.names = F, sep = ";")
}, mc.cores= detectCores())
dir.create("simulated_data")
rm(list = ls())
library(GrandParisPackage)
library(parallel)
source("simulationParameters.R")
n_traj <- 500
mclapply(1:n_traj,
function(i){
seed <- 100 + i
set.seed(seed)
simulated_POD <- SINE_simulate(theta = trueTheta, sigma = trueSigma2, x0 = 0,
times = times)
write.table(simulated_POD, paste0("simulated_data/simul_data_seed", seed, ".txt"),
col.names = T, row.names = F, sep = ";")
}, mc.cores= detectCores())
rm(list = ls())
library(GrandParisPackage)
library(parallel)
source("simulationParameters.R")
seed <- 122
set.seed(seed)
simulated_POD <- read.table(paste0("simulated_data/simul_data_seed", seed, ".txt"),
sep = ";", header = T)
observations <- simulated_POD[, "observations"]
estTheta = TRUE; estSig = FALSE; updateOrders <- rep(T, n)
gradientSteps <- get_grad_steps(0.6, cst = 8)
plot(gradientSteps)
plot(gradientSteps[,1])
n_start_points <- 50
length(oobservations)
length(observations)
N_tilde_IS <- 10
allRes_IS <- mclapply(1:n_start_points, function(seed){
set.seed(seed)
thetaStart <- runif(1, 0, 2 * pi)
Res <- fastTangOR(observations, times,
thetaModel = thetaStart, sigma2 = trueSigma2,
updateOrders = updateOrders, gradientSteps = gradientSteps,
all = TRUE, estimateTheta = estTheta, estimateSigma2 = estSig,
randomWalkParam = 1, backwardSampleSize = N_tilde_IS)
}, mc.cores = detectCores())
set.seed(seed)
thetaStart <- runif(1, 0, 2 * pi)
Res <- fastTangOR(observations, times,
thetaModel = thetaStart, sigma2 = trueSigma2,
updateOrders = updateOrders, gradientSteps = gradientSteps,
all = TRUE, estimateTheta = estTheta, estimateSigma2 = estSig,
randomWalkParam = 1, backwardSampleSize = 2, IS = TRUE)
